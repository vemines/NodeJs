//// Address in database ////
// reduce { "city",  "state", "country", "address"} to {"address", "address_city"}

////  Access Api  ////
access-1 for small app
access-2 for large system using rsa -> long time check token
this project use access-1

//// Request data ////
const HEADER = {
    API_KEY: 'x-api-key',
    CLIENT_ID: 'x-client-id',
    ACCESSTOKEN: 'x-access-token',
    REFRESHTOKEN: 'x-refresh-token',
}
req.payload: { usr_slug, email, _id }
req.objKey: apikeys Document
req.keyStore: keyToken Document
req.refresh_token: refresh token from request header
req.access_token: access token from request header
req.shop_id: "_id" of shop Document

/// Rbac Api ////
// accesscontrol permissions format
let grantList = [
    { role: 'admin', resource: 'video', action: 'create:any', attributes: '*, !views' },
    { role: 'admin', resource: 'video', action: 'read:any', attributes: '*' },
    { role: 'admin', resource: 'video', action: 'update:any', attributes: '*, !views' },
    { role: 'admin', resource: 'video', action: 'delete:any', attributes: '*' },
 
    { role: 'user', resource: 'video', action: 'create:own', attributes: '*, !rating, !views' },
    { role: 'user', resource: 'video', action: 'read:any', attributes: '*' },
    { role: 'user', resource: 'video', action: 'update:own', attributes: '*, !rating, !views' },
    { role: 'user', resource: 'video', action: 'delete:own', attributes: '*' }
]; 

/// Comment Api ////
// Nested comment (watch note-img/nested-comment.png)

/// Apikey Api ////
add/remove permissions need manual add "akp00002"

/// Inventory Api ////
// implement reservation when order complete
// Advanced (need session) 
1. create a temporary reservation when the user adds/update a product.
2. convert to permanent reservation when the user checks out.
3. if order incomplete, remove the reservation (at user's session or cart expires or removes the product from their cart)

////  Order Api  ////
Using optimistic locking (FIFO) for place order

////  Upload Api  ////
Upload image to cloudinary, free tier is good
// S3 cloudfront
openssl genrsa -out private_key.pem 2048
openssl rsa -pubout -in private_key.pem -out public_key.pem

////  Rule name function  ////
Controller: handleFunctionName
Service: functionName
Repository: mongoose function use

////  Instance in class with static, this  ////
class Car {
    constructor(model, year) {
        this.model = model;
        this.year = year;
    }

    startEngine() {
        const wheels = Car.numberOfWheels();    // the static function only call by Class. , and can't access this.model.
        return `${this.model} engine started. This car has ${wheels} wheels.`;
    }

    static numberOfWheels() {
        return 4;
    }
}
const myCar = new Car('Toyota', 2020);
console.log(myCar.numberOfWheels()); // Throws an error because numberOfWheels is not a method of the instance

//// Java Script Function ////
// reduce (reduce array to single value then process it, 0 is init of acc)
const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((acc, cur) => acc + cur, 0);

////  mongoose  ////
// $elemMatch query element matches a specified condition in array
cart_products: { $elemMatch: { prod_id: prod_id } }

// populate return Array replace field with doc it refence to with specific field
.populate('prod_shop', 'prod_name prod_email -_id')

// _id includes a timestamp it create
.sort({ _id: -1 }) // sort descending (1 is ascending )

// add $addToSet to "update" object after checking refresh_token
const update = { public_key, private_key, refresh_token };
if (token.refresh_token !== "") update.$addToSet = { refresh_tokens_used: foundToken.refresh_token };

// middle findOneAndUpdate have .pre 2 times, 2nd can be undefined so avoid using it